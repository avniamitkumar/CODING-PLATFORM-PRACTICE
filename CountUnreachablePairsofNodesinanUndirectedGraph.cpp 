class Solution {
public:
    long long solve (vector<int> adj[], int node, vector<bool> &vis) {
        vis[node] = 1;
        long long cnt = 1;
        queue<int> q;
        q.push (node);
        while (!q.empty ()) {
            int cur = q.front ();
            q.pop ();
            for (auto it : adj[cur]) {
                if (!vis[it]) {
                    q.push (it);
                    vis[it] = 1;
                    cnt ++;
                }
            }
        }
        return cnt;
    }
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<int> adj[n];
        for (int i = 0; i < edges.size (); i ++) {
            int u = edges[i][0];
            int v = edges[i][1];
            adj[u].push_back (v);
            adj[v].push_back (u);
        }
        vector<bool> vis (n, 0);
        int total_nodes = n;
        long long ans = 0;
        for (int i = 0; i < n; i ++) {
            if (!vis[i]) {
                long long nodes = solve (adj, i, vis);
                //cout << nodes << " ";
                ans += (long long)nodes * ((long long)total_nodes - nodes);
                total_nodes -= nodes;
            }
        }
        return ans;
    }
};